//#include<stdio.h>
//
//int main()
//{
//	int arr[] = { 0,1,2,3,4,5 };
//	short * p = (short*)arr;
//	int i = 0;
//	for (i = 0; i < 8; i++)
//	{
//		*(p + 1) = 0;
//	}
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}


//#include<stdio.h>
//
//int main()
//{
//
//	int a = 0x11223344;
//	char* pc = (char*)&a;
//	*pc = 0;
//	printf("%x\n", a);
//}


//#include<stdio.h>
//int i;//全局变量，不初始化，默认为0
//int main()
//{
//	i--;
//	//sizeof()--计算变量/类型所占内存的大小>=0 无符号数
//	if (i > sizeof(1))
//	{
//		printf(">\n");
//	}
//	else
//		printf("<\n");
//	return 0;
//}


//#include<stdio.h>
//int main()
//{
//	int a, b, c;
//	a = 5;
//	c = ++a;//c=6 a=6
//	b = ++c, c++, ++a, a++;//b=7 c=8 a=8
//	b += a++ + c;
//	printf("a = %d,b = %d, c = %d\n", a, b, c);
//	return 0;
//}


//#include<stdio.h>
//int count_one(unsigned int n)
//{
//	int count = 0;
//	/*while (n)
//	{
//		if (n % 2 == 1)
//			count++;
//			n = n / 2;
//	}*/
//	int i = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (((n >> i) & 1) == 1)
//			count++;
//	}
//	return count;
//}
//int main()
//{
//	int a = 0;
//	scanf_s("%d", &a);
//	//写一个函数求a的二进制（补码）表示中有几个1
//	int count = count_one(a);
//	printf("count = %d\n", count);
//	return 0;
//}


//经典@@！！！！
//#include<stdio.h>
//int count_one(int n)
//{
//	int count = 0;
//	while (n)
//	{
//		n = n & (n - 1);
//		count++;
//	}
//	return count;
//}
//int  main()
//{
//	int a = 0;
//	scanf_s("%d", &a);
//	int count = count_one(a);
//	printf("count= %d", count);
//	return 0;
//}


//#include<stdio.h>
//
//int get_disone(int m, int n)
//{
//	int count=0;
//	int tem = m ^ n; 
//	while (tem)
//	{
//		tem = tem & (tem - 1);
//		count++;
//	}
//}
//int main()
//{
//	int m = 0, n = 0;
//	scanf_s("%d %d", &m, &n);
//	int count = get_disone(m, n);
//
//	printf("count = %d\n", count);
//	return 0;
//}


//打印二进制数的奇数和偶数位
//#include<stdio.h>
//
//void print(int m)
//{
//	int i = 0;
//	printf("奇数位\n");
//	for (i = 30; i >= 0; i -= 2)
//	{
//		printf("%d", (m >> i) & 1);
//	}
//	printf("\n偶数位\n");
//	for (i = 31;i >= 1; i -= 2)
//	{
//		printf("%d", (m >> i) & 1);
//	}
// }
//int main()
//{
//	int m = 0;
//	scanf_s("%d", &m);
//	print(m);
//	return 0;
//}

//#include<stdio.h>
//void print(int arr[], int size)
//{
//	int i = 0;
//	for (i = 0; i < size; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//}
//int main()
//{
//	int arr[] = { 0,1,2,3,4,5,6,7,8,9 };
//	int size = sizeof(arr) / sizeof(arr[0]);
//	print(arr, size);
//	return 0;
//}

//输入一个数字，打印乘法口诀表（函数
//#include<stdio.h>
//void print_cheng(int n)
//{
//	int i = 0, j = 0;
//	for (i = 1; i <= n; i++)//行
//	{
//		for (j = 1; j <= i; j++)//列
//		{
//			printf("%-2d * %-2d = %-4d ", j, i, i * j);
//		}
//		printf("\n");
//	}
//}
//int main()
//{
//	int n = 0;
//	scanf_s("%d", &n);
//	print_cheng(n);
//	return 0;
//}


//#include<stdio.h>
//#include<string.h>
////字符串逆序
//int my_strlen(char arr[])
//{
//	int count = 0, i = 0;
//	while (arr[i]=='\0')
//	{
//		count++;
//		i++;
//	}
//	return count;
//}
////void reverse_string(char arr[])//常规
////{
////	int left = 0;
////	int right = my_strlen(arr) - 1;
////	while (right > left)
////	{
////		int temp = arr[left];
////		arr[left] = arr[right];
////		arr[right] = temp;
////		right--;
////		left++; 
////	}
////}
//void reverse_string(char arr[])//递归
//{
//	char temp = arr[0];
//	int len = my_strlen(arr);
//	arr[0] = arr[len - 1];
//	arr[len - 1] = '\0';
//	if(my_strlen(arr+1)>=2)
//	   reverse_string(arr + 1);
//	arr[len - 1] = temp;
//}
//int main()
//{
//	char arr[] = "abcdefg";//fedcba
//	reverse_string(arr);
//	printf("%s\n", arr);
//	return 0;
//}
