//#include<stdio.h>//奇数求和
//int main()
//{
//	int n = 0, sum = 0;
//	while (1)
//	{
//		scanf("%d", &n);
//		if (n <= 0)
//			break;
//		if (n % 2)
//			sum += n;
//	}
//	printf("%d\n", sum);
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
//	int a = 0;
//	scanf_s("%d", &a);//右移操作符，移动的是二进制位。通常遇见的都是算数右移。
//	int b=a >> 1;//右移操作符：>>  1.算术右移：右边丢弃，左边补原符号位。
//	printf("%d",b);//2.逻辑右移，右边丢弃，左边补0.
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
	//int a = -1;
	//int b = a >> 1;
    //printf("b = %d\n", b);
//	int a = 10;
//	int b = a << 1;//左移操作符：
//	printf("b = %d", b);//、左边丢弃，右边补0.
//	return 0;
//}
//对于移位操作符，不要移位负数位，这是标准未定义的。只能作用于整型。
//位操作符，操作数必须是整型的。

//#include<stdio.h>//位操作符 &-按2进制与
//int main()
//{
//	int a = 3, b = 5;
//	int c = a & b;
//	int d = a | b;//|按二进制或，
//	int e = a ^ b;//^按2进制位异或，相同为0，相异为1，
//	printf("c = %d\nd = %d\ne = %d", c, d,e);
//	return 0;
//}

//交换两个变量的值，（注，不能使用第三变量）即a=3，b=5；交换后，a=5，b=3；
//#include<stdio.h>
//int main()
//{
//	int a = 3, b = 5;
//	printf("before: a = %d,b = %d\n", a, b);
//	//加减法，可能会溢出。
//	/*a = a + b;//a=8;
//	b = a - b;//b=3
//	a = a - b;//
//	printf("after: a = %d,b = %d", a, b);*/
//	//异或的方法。
//	//不建议使用，but，面试可能会遇见。
//	a = a ^ b;
//	b = a ^ b;
//	a = a ^ b;
//	printf("after: a = %d,b = %d", a, b);
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
//	//int num = 0, count = 0;
//	//scanf_s("%d", &num);//统计num的补码中有几个1 ?
//	/*while (num)//当num为负数时，存在问题。
//	{
//		if (num % 2 == 1)
//			count++;
//			num = num / 2;
//	}*/  
//	//移位操作符的妙用！
//	/*int i = 0;
//	for (i = 0; i < 32; i++)
//	{
//		if (1 == ((num >> i) & 1))
//			count++;
//	}*/
//	int num = 0;
//	int count = 0;//二进制中 1的个数。
//	scanf_s("%d", &num);
//	while (num)
//	{
//		count++;
//		num = num & (num - 1);//3
//	}
//	printf("count = %d\n", count);
//	return 0;
//}

//#include<stdio.h>
//int count = 1;
//int main()
//{
//	printf("iXL ");
//	count++;
//	printf(":%d\n",count);
//	main();
//	return 0;
//}


//定义函数
#define Row 9
#define Col 9

#define Rows Row+2
#define Cols Col+2
#define EASY_COUNT 10
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void Initboard(char board[Rows][Cols],int rows, int cols,char set);
void Displayboard(char board[Rows][Cols], int row, int col);
void Setmine(char board[Rows][Cols], int row, int col);
void Finemine(char mine[Rows][Cols],char show[Rows][Cols],int row, int col);

//完成函数的构造
#define _CRT_SECURE_NO_WARNINGS 1
#include"game.h"
void Initboard(char board[Rows][Cols], int rows, int cols,char set)//初始化棋盘
{
	int i = 0, j = 0;
	for (i = 0; i < rows; i++)
	{
		for (j = 0; j < cols; j++)
		{
			board[i][j] = set;
		}
	}
}
void Displayboard(char board[Rows][Cols], int row, int col)//打印棋盘
{
	int i = 0, j = 0;
	//打印列号
	for (i = 0; i <= col; i++)
	{
		printf("%d ", i);
	}printf("\n");
	for (i = 1; i <= row; i++)
	{
		printf("%d ", i);//打印行号
		for (j = 1; j <= col; j++)
		{
			printf("%c ", board[i][j]);
		}
		printf("\n");
	}
}
void Setmine(char board[Rows][Cols], int row, int col)//布置雷
{
	int count = EASY_COUNT;
	while (count )
	{
		int x = rand() % row + 1;//产生一到九
		int y = rand() % col + 1;
		if (board[x][y] == '0')
		{
			board[x][y] = '1';
			count--;
		}
	}

}
int get_my_count(char mine[Rows][Cols], int x, int y)
{
	  return mine[x - 1][y] +
		mine[x - 1][y - 1] +
		mine[x][y - 1] +
		mine[x + 1][y - 1] +
		mine[x + 1][y] +
		mine[x+1][y + 1] +
		  mine[x][y+1]+
		mine[x - 1][y - 1] - 8 * '0';

}
void Finemine(char mine[Rows][Cols], char show[Rows][Cols], int row, int col)
{
	int x = 0, y = 0;
	int win = 0;
	while (win<row*col-EASY_COUNT)
	{
		printf("请输入扫雷的坐标>: ");
		scanf_s("%d %d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (mine[x][y] == '1')//踩雷
			{
				printf("你死啦！\n");
				Displayboard(mine, row, col);
				break;
			}
			else//不踩雷
			{
				 //计算x，y周围有几颗雷.
				int count=get_my_count(mine,x,y);
				show[x][y] == count + '0';
				Displayboard(show, row, col);
				win++;
			}
		}
		else
			printf("坐标非法，请重新输入！\n");
	}
	if (win == row * col - EASY_COUNT)
	{
		printf("nice，你赢了！\n");
		Displayboard(mine, row, col);
	}
}

//运行函数
#include"game.h"
void menu()
{
	printf("*****************************\n");
	printf("********   1. play   ********\n");
	printf("********   0. exit   ********\n");
	printf("*****************************\n");
}
void game()//雷的信息存储
{//1.布置好的雷的信息
	char mine[ Rows][Cols] = { 0 };//
	//2.排查出的雷的信息
	char show[Rows][Cols] = { 0 };
	//初始化
	Initboard(mine, Rows, Cols,'0');
	Initboard(show, Rows, Cols,'*');
	//打印棋盘
	//Displayboard(mine, Row, Col);
	Displayboard(show, Row, Col);
	//布置雷
	Setmine(mine, Row, Col);
	Displayboard(mine, Row, Col);
	//扫雷
	Finemine(mine, show, Row, Col);
}

void test()
{
	int input=0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择:> ");
		scanf_s("%d",&input);
		switch (input)
		{
		case 1:
			game();
				break;
		case 0:
			printf("退出游戏\n");
			break;
		default:printf("选择错误,重新选择\n");
			break;
		}
	} while (input);
}
int main()
{
	test();
	return 0;
}
